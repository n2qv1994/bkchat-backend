#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app/app.js');
var debug = require('debug')('backend:server');
var http = require('http');
var socket = require('socket.io')({path: '/videoconference'});
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);
var server = https.createServer({key : fs.readFileSync("server.key"),cert: fs.readFileSync("server.crt")},app);


/**
 * Listen on provided port, on all network interfaces.
 */
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
server.listen(port, "0.0.0.0");
server.on('error', onError);
server.on('listening', onListening);

// Attach socket to server
socket.attach(server);
socket.set('heartbeat interval', 5000);
socket.set('heartbeat timeout', 5000);
/**
 * set global socket and define socket_server
 */
global.socket_system = socket.of("/system");
global.socket_bkrtc = socket.of("/bkrtc");

var socket_server = require("../app/wsserver/socket_service");
var bkrtc_server = require("bkrtc-server-sdk");
var bkrtc = new bkrtc_server();
bkrtc.create(global.socket_bkrtc);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
