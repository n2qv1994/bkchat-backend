
/**
 * Author: Nguyen Hoang Anh
 * Service for Signaling
 */

var fs = require("fs");
var uuid = require('node-uuid');
var Utils = require("../utils/Util");

var Agent = require("../models/Agent");
var Peer = require("../models/Peer");
var Room = require("../models/Room");


var SignalingService = {
  list_agent: {}
};

SignalingService.agent_authen = function(public_key) {
  var agent = SignalingService.list_agent[public_key];
  var result = {};

  if(agent) {
    result = {
      type: "SUCCESS",
      message: "*** MESSAGE: - Verified successfully agent with key: " + public_key,
      data: agent
    };
    return result;
  }
  else {
    // result = {
    //   type: "ERROR",
    //   message: "*** ERROR: - agent authenication is not successful with key: " + public_key,
    //   data: {}
    // };
    // return result;
    agent = new Agent();
    SignalingService.list_agent[public_key] = agent;
    result = {
      type: "SUCCESS",
      message: "*** MESSAGE: - Verified successfully agent with key: " + public_key,
      data: agent
    };
    return result;
  }
};

SignalingService.add_peer = function(agent, peer_id, connection_id, peer_name, status) {
  var peer = new Peer(peer_name, peer_id, connection_id, status);
  agent.list_peer[peer_id] = peer;
};

SignalingService.add_room = function(room_name, agent, peer) {
  var result = {};

  if(room_name === null) {
    result.state = "FAILED";
    result.data = "room_name's not valid";
    return error;
  }
  var room = agent.list_room[room_name];
  room.list_peer.push(peer);

  result.state = "SUCCESS";
  result.data = room;
  return result;
};

SignalingService._find_room = function(agent, room_name) {
  var room = agent.list_room[room_name];
  if(room) {
    return room;
  }
  return null;
};

SignalingService._find_peer_in_agent = function(agent, peer_id) {
  var peer = agent.list_peer[peer_id];
  if(peer) {
    return peer;
  }
  return null;
};

SignalingService._find_peer_in_agent_by_peer_name = function(agent, peer_name) {
  var list_peer = agent.list_peer;

  for(var peer_id in list_peer) {
    if(peer_name === list_peer[peer_id].peer_name) {
      return list_peer[peer_id];
    }
  }
  return null;
};

SignalingService._find_peer_in_room = function(agent, room_name, peer_id) {
  var room = SignalingService._find_room(agent, room_name);
  var result = {};

  if(room === null) {
    result.state = "ERROR";
    result.data = "Not found room";
    return result;
  }

  var list_peer = room.list_peer;
  for(var i = 0; i < list_peer.length; i++) {
    var peer = list_peer[i];
    if(peer_id === peer.peer_id) {
      result.state = "SUCCESS";
      result.data = peer;
      return result;
    }
  }

  result.state = "FAILED";
  result.data = "Not found peer into " + room_name;
  return result;
};

SignalingService.notify_room = function(type, agent, peer, room_name, web_socket_server) {
  var message = {
    "peer": peer
  };

  var room = SignalingService._find_room(agent, room_name);
  var list_peer = room.list_peer;

  for(var i = 0; i < list_peer.length; i++) {
    var peer1 = list_peer[i];
    if(peer1.peer_id === peer.peer_id) {
      continue;
    }
    else {
      web_socket_server.to(peer1.connection_id).emit("MESSAGE", JSON.stringify({"data": {"type": type, "message": message}}));
    }
  }
};

SignalingService.notify_peer = function(type, peer_dst, message, web_socket_server) {
  web_socket_server.to(peer_dst.connection_id).emit("MESSAGE", JSON.stringify({"data": {"type": type, "message": message}}));
};

SignalingService.notify = function(type, message, web_socket) {
  web_socket.emit("MESSAGE", JSON.stringify({"data": {"type": type, "message": message}}));
};

SignalingService.create_room = function(room_name, type) {
  return new Room(room_name, type);
};

module.exports = SignalingService;
