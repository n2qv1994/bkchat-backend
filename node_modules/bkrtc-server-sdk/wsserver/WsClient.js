
/**
 * Author: Nguyen Hoang Anh
 * WebSocket for Client
 */

var fs = require("fs");
var Utils = require("../utils/Util");
var Uuid = require("node-uuid");
var EventEmitter = require('eventemitter3');

function ClientSocket(agent, event, web_socket, web_socket_server, SignalingService) {
	var self = this;

	self.agent = agent;
	self.event = event;
	self.web_socket = web_socket;
	self.web_socket_server = web_socket_server;
	self.SignalingService = SignalingService;

}

ClientSocket.prototype.handle_message = function() {
	var self = this;

	self.web_socket.on("INIT", function(message) {
    var data_req = JSON.parse(message).data;

    var peer = self.SignalingService._find_peer_in_agent_by_peer_name(self.agent, data_req.message.peer_name);
    if(peer === null) {
	    self.peer_id = Uuid.v1();
	    var connection_id = self.web_socket.id;
	    var peer_name = data_req.message.peer_name;

	    self.SignalingService.add_peer(self.agent, self.peer_id, connection_id, peer_name, 1);
	    self.SignalingService.notify("INIT", "ACCEPT", self.web_socket);
	  }
	  else {
	  	self.SignalingService.notify("INIT", "ACCEPT", self.web_socket);
	  }
  });

  self.web_socket.on("JOIN_ROOM", function(message) {
    var data_req = JSON.parse(message).data;
    var room_name = data_req.message.room_name || "";
    self.room_name = room_name;

    if(room_name === "") {
      var error = "room_name's not valid";
      Utils.log("*** ERROR: - " + error);
			self.event.emit("LOGGING", "*** ERROR: - " + error);
      self.SignalingService.notify("ERROR", error, self.web_socket);
      return;
    }

    var peer = self.SignalingService._find_peer_in_agent(self.agent, self.peer_id);
    if(peer === null) {
      var error3 = "Not found peer in agent";
      Utils.log("*** ERROR: - " + error3);
			self.event.emit("LOGGING", "*** ERROR: - " + error3);
      self.SignalingService.notify("ERROR", error3, self.web_socket);
      return;
    }

		if(peer.status === 2) {
			var error5 = "Peer: " + peer.peer_name + " is busy";
			Utils.log("*** ERROR: - " + error5);
			self.event.emit("LOGGING", "*** ERROR: - " + error5);
			self.SignalingService.notify("ERROR", error5, self.web_socket);
			return;
		}

    var room = self.SignalingService._find_room(self.agent, room_name);
    if(room === null) {
    	room = self.SignalingService.create_room(room_name, "MULTI");
      self.agent.list_room[room_name] = room;
    }

    var result = self.SignalingService._find_peer_in_room(self.agent, room_name, self.peer_id);
    if(result.state === "ERROR") {
      var error1 = result.data;
      Utils.log("*** ERROR: - " + error1);
			self.event.emit("LOGGING", "*** ERROR: - " + error1);
      self.SignalingService.notify(result.state, error1, self.web_socket);
      return;
    }
    else if(result.state === "SUCCESS") {
    	var error4 = "Peer existed in " + room_name;
      Utils.log("*** ERROR: - " + error4);
			self.event.emit("LOGGING", "*** ERROR: - " + error4);
      self.SignalingService.notify(result.state, error4, web_socket);
      return;
    }
    else if(result.state === "FAILED") {
	    // Add peer into room of agent
	    var result1 = self.SignalingService.add_room(room_name, self.agent, peer);
	    if(result1.state === "FAILED") {
	      Utils.log(result1.data);
	      return;
	    }
	    else if(result1.state === "SUCCESS") {
				peer.status = 2; // change status of peer
	      self.SignalingService.notify_room("PEER_CONNECT",self.agent, peer, room_name, self.web_socket_server);

	      var list_peer = room.list_peer.slice(0);
	      for (var i = 0; i < list_peer.length; i++) {
	      	if(self.peer_id === list_peer[i].peer_id) {
	      		list_peer.splice(i, 1);
	      		break;
	      	}
	      }
	      Utils.log(room.list_peer);

	      var data_res = {
	        "list_peer": list_peer
	      };

	      self.SignalingService.notify("JOIN_ROOM", data_res, self.web_socket);
	    }
	  }

  });

  self.web_socket.on("LEFT_ROOM", function(message) {
  	var room_name = self.room_name;

  	var room = self.SignalingService._find_room(self.agent, room_name);
    if(room === null) {
    	var error = "Not found "+ room_name + " in agent";
      Utils.log("*** ERROR: - " + error);
			self.event.emit("LOGGING", "*** ERROR: - " + error);
      self.SignalingService.notify("ERROR", error, self.web_socket);
      return;
    }

    var result = self.SignalingService._find_peer_in_room(self.agent, room_name, self.peer_id);
    if(result.state === "SUCCESS") {
    	var peer = result.data;
    	self.SignalingService.notify_room("END_CALL",self.agent, peer, room_name, self.web_socket_server);

    	// Remove peer in room
	    // var list_peer = room.list_peer;
	    // for (var i = 0; i < list_peer.length; i++) {
	    // 	if(self.peer_id === list_peer[i].peer_id) {
	    // 		list_peer.splice(i, 1);
	    // 		break;
	    // 	}
	    // }
    }
    else if(result.state === "ERROR") {
      var error1 = result.data;
      Utils.log("*** ERROR: - " + error1);
			self.event.emit("LOGGING", "*** ERROR: - " + error1);
      self.SignalingService.notify(result.state, error1, self.web_socket);
      return;
    }
    else if(result.state === "FAILED") {
    	var error2 = result.data;
      Utils.log("*** ERROR: - " + error2);
			self.event.emit("LOGGING", "*** ERROR: - " + error2);
      self.SignalingService.notify(result.state, error2, self.web_socket);
      return;
    }

		// change status peer in agent
		var peer = self.SignalingService._find_peer_in_agent(self.agent, self.peer_id);
    if(peer === null) {
      var error3 = "Not found peer in agent";
      Utils.log("*** ERROR: - " + error3);
			self.event.emit("LOGGING", "*** ERROR: - " + error3);
      self.SignalingService.notify("ERROR", error3, self.web_socket);
      return;
    }

		peer.status = 1;

  });

  self.web_socket.on("REQUEST_CALL", function(message) {
  	var data_req = JSON.parse(message).data;

  	var peer_name = data_req.message.peer_name;
  	if(peer_name === "") {
      var error = "peer_name's not valid";
      Utils.log("*** ERROR: - " + error);
			self.event.emit("LOGGING", "*** ERROR: - " + error);
      self.SignalingService.notify("ERROR_DIRECT_CALL", error, self.web_socket);
      return;
    }

    var peer_dst = self.SignalingService._find_peer_in_agent_by_peer_name(self.agent, peer_name);
    if(peer_dst === null) {
      var error1 = "Not found peer in agent";
      Utils.log("*** ERROR: - " + error1);
			self.event.emit("LOGGING", "*** ERROR: - " + error1);
      self.SignalingService.notify("ERROR_DIRECT_CALL", error1, self.web_socket);
      return;
    }

		if(peer_dst.status === 2) {
			var error3 = "Peer: " + peer_dst.peer_name + " is busy";
			Utils.log("*** ERROR: - " + error3);
			self.event.emit("LOGGING", "*** ERROR: - " + error3);
			self.SignalingService.notify("ERROR_DIRECT_CALL", error3, self.web_socket);
			return;
		}

    var peer = self.SignalingService._find_peer_in_agent(self.agent, self.peer_id);
    if(peer === null) {
      var error2 = "Not found peer in agent";
      Utils.log("*** ERROR: - " + error2);
			self.event.emit("LOGGING", "*** ERROR: - " + error2);
      self.SignalingService.notify("ERROR_DIRECT_CALL", error2, self.web_socket);
      return;
    }

		if(peer.status === 2) {
			var error4 = "Peer: " + peer.peer_name + " is busy";
			Utils.log("*** ERROR: - " + error4);
			self.event.emit("LOGGING", "*** ERROR: - " + error4);
			self.SignalingService.notify("ERROR_DIRECT_CALL", error4, self.web_socket);
			return;
		}

    // Create to new room
    var room_name = Uuid.v4();
    self.room_name = room_name;

    var room = self.SignalingService.create_room(room_name, "SINGLE");
    self.agent.list_room[room_name] = room;

    // Add two peer into room
    self.agent.list_room[room_name].list_peer.push(peer);
    self.agent.list_room[room_name].list_peer.push(peer_dst);

    var message1 = {
    	peer: peer,
    	room_name: room_name
    };
    self.SignalingService.notify_peer("REQUEST_CALL", peer_dst, message1, self.web_socket_server);
  });

  self.web_socket.on("RESPONSE_CALL", function(message) {
  	var data_req = JSON.parse(message).data;

  	var room_name = data_req.message.room_name;
  	self.room_name = room_name;

  	var peer_dst = data_req.message.peer;

  	var result = self.SignalingService._find_peer_in_room(self.agent, room_name, self.peer_id);
  	if(result.state === "SUCCESS") {
    	var peer = result.data;

    	var message1 = {
    		peer: peer,
				room_name: room_name
    	};

    	self.SignalingService.notify_peer("RESPONSE_CALL", peer_dst, message1, self.web_socket_server);
    }
    else if(result.state === "ERROR") {
      var error1 = result.data;
      Utils.log("*** ERROR: - " + error1);
			self.event.emit("LOGGING", "*** ERROR: - " + error1);
      self.SignalingService.notify("ERROR_DIRECT_CALL", error1, self.web_socket);
      return;
    }
    else if(result.state === "FAILED") {
    	var error2 = result.data;
      Utils.log("*** ERROR: - " + error2);
			self.event.emit("LOGGING", "*** ERROR: - " + error2);
      self.SignalingService.notify("ERROR_DIRECT_CALL", error2, self.web_socket);
      return;
    }

		// change status of peer
		var peer1 = self.SignalingService._find_peer_in_agent(self.agent, self.peer_id);
		peer1.status = 2;
		var peer2 = self.SignalingService._find_peer_in_agent(self.agent, peer_dst.peer_id);
		peer2.status = 2;
  });

	self.web_socket.on("SEND_CANDIDATE", function(data) {
		var result = self.SignalingService._find_peer_in_room(self.agent, self.room_name, self.peer_id);
		var peer;

		if(result.state === "ERROR") {
      var error = result.data;
      Utils.log("*** ERROR: - " + error);
			self.event.emit("LOGGING", "*** ERROR: - " + error);
      self.SignalingService.notify(result.state, error, self.web_socket);
      return;
    }
    else if(result.state === "FAILED") {
    	var error1 = result.data;
      Utils.log("*** FAILED: - " + error1);
			self.event.emit("LOGGING", "*** ERROR: - " + error1);
      self.SignalingService.notify(result.state, error1, self.web_socket);
      return;
    }
    else if(result.state === "SUCCESS") {
    	peer = result.data;
    }

		self._send_candidate(data, peer.peer_id);
	},
	function(error) {
    Utils.log(error);
  });

  self.web_socket.on("SEND_OFFER", function(data) {
  	var result = self.SignalingService._find_peer_in_room(self.agent, self.room_name, self.peer_id);
		var peer;

		if(result.state === "ERROR") {
      var error = result.data;
      Utils.log("*** ERROR: - " + error);
			self.event.emit("LOGGING", "*** ERROR: - " + error);
      self.SignalingService.notify(result.state, error, self.web_socket);
      return;
    }
    else if(result.state === "FAILED") {
    	var error1 = result.data;
      Utils.log("*** FAILED: - " + error1);
			self.event.emit("LOGGING", "*** ERROR: - " + error1);
      self.SignalingService.notify(result.state, error1, self.web_socket);
      return;
    }
    else if(result.state === "SUCCESS") {
    	peer = result.data;
    }

  	self._send_offer(data, peer);
  },
  function(error) {
  	Utils.log(error);
  });

  self.web_socket.on("SEND_ANSWER", function(data) {
  	var result = self.SignalingService._find_peer_in_room(self.agent, self.room_name, self.peer_id);
		var peer;
		if(result.state === "ERROR") {
      var error = result.data;
      Utils.log("*** ERROR: - " + error);
			self.event.emit("LOGGING", "*** ERROR: - " + error);
      self.SignalingService.notify(result.state, error, self.web_socket);
      return;
    }
    else if(result.state === "FAILED") {
    	var error1 = result.data;
      Utils.log("*** FAILED: - " + error1);
			self.event.emit("LOGGING", "*** ERROR: - " + error1);
      self.SignalingService.notify(result.state, error1, self.web_socket);
      return;
    }
    else if(result.state === "SUCCESS") {
    	peer = result.data;
    }

  	self._send_answer(data, peer.peer_id);
  },
  function(error) {
  	Utils.log(error);
  });

	self.web_socket.on("RESET", function(message) {

		self.agent.list_peer = {};
		self.agent.list_room = {};

		self.SignalingService.notify("RESET_ROOM", {"msg":"Reset room successfully", "status":"success"}, self.web_socket);
	});

  self.web_socket.on("disconnect", function(data) {

    Utils.log("*** MESSAGE: - " + self.peer_id + " DISCONNECT.");
  	var peer;

  	// Remove peer in room
  	var room_name = self.room_name;

  	var room = self.SignalingService._find_room(self.agent, room_name);
    if(room === null) {
    	var error = "Not found "+ room_name + " in agent";
      Utils.log("*** ERROR: - " + error);
			self.event.emit("LOGGING", "*** ERROR: - " + error);
      self.SignalingService.notify("ERROR", error, self.web_socket);
      return;
    }

    var result = self.SignalingService._find_peer_in_room(self.agent, room_name, self.peer_id);
    if(result.state === "SUCCESS") {
    	peer = result.data;
    	self.SignalingService.notify_room("PEER_DISCONNECT",self.agent, peer, room_name, self.web_socket_server);

    	// Remove peer in room
	    for (var i = 0; i < room.list_peer.length; i++) {
	    	if(self.peer_id === room.list_peer[i].peer_id) {
	    		room.list_peer.splice(i, 1);
	    		break;
	    	}
	    }
    }
    else if(result.state === "ERROR") {
      var error1 = result.data;
      Utils.log("*** ERROR: - " + error1);
			self.event.emit("LOGGING", "*** ERROR: - " + error1);
      self.SignalingService.notify(result.state, error1, self.web_socket);
      return;
    }
    else if(result.state === "FAILED") {
    	var error2 = result.data;
      Utils.log("*** ERROR: - " + error2);
			self.event.emit("LOGGING", "*** ERROR: - " + error2);
      self.SignalingService.notify(result.state, error2, self.web_socket);
      return;
    }

    // Remove peer in agent
    delete self.agent.list_peer[peer.peer_id];
  });

	self.web_socket.on("force_disconnect", function(data) {
		self.web_socket.disconnect();
  });
};

ClientSocket.prototype._send_offer = function(message, peer) {
	var self = this;

  var data_req = JSON.parse(message).data;

  var result = self.SignalingService._find_peer_in_room(self.agent, self.room_name, data_req.message.peer_id);
	var peer_dst;

	if(result.state === "ERROR") {
    var error = result.data;
    Utils.log("*** ERROR: - " + error);
		self.event.emit("LOGGING", "*** ERROR: - " + error);
    self.SignalingService.notify(result.state, error, self.web_socket);
    return;
  }
  else if(result.state === "FAILED") {
  	var error1 = result.data;
    Utils.log("*** FAILED: - " + error1);
		self.event.emit("LOGGING", "*** ERROR: - " + error1);
    self.SignalingService.notify(result.state, error1, self.web_socket);
    return;
  }
  else if(result.state === "SUCCESS") {
  	peer_dst = result.data;
  }

  var log = "*** MESSAGE: - Time: " + new Date() + " - " + peer.peer_id + " SEND SDP OFFER TO " + peer_dst.peer_id + "\n";
  Utils.log(log);
	self.event.emit("LOGGING", log);
  fs.appendFile(global.root_path + "/logs/log.txt", log, function(error) {
  	if(error) {
  		Utils.log(error);
			self.event.emit("LOGGING", "*** ERROR: - " + error);
  	}
  });

  var data_res = {
    "sdp": data_req.message.sdp,
    "peer_id": peer.peer_id,
    "peer_name": peer.peer_name
  };
  self.web_socket_server.to(peer_dst.connection_id).emit("MESSAGE", JSON.stringify({"data": {"type": "RECEIVE_OFFER", "message": data_res}}));
};

ClientSocket.prototype._send_answer = function(message, peer_id) {
	var self = this;

  var data_req = JSON.parse(message).data;

  var result = self.SignalingService._find_peer_in_room(self.agent, self.room_name, data_req.message.peer_id);
	var peer_dst;

	if(result.state === "ERROR") {
    var error = result.data;
    Utils.log("*** ERROR: - " + error);
		self.event.emit("LOGGING", "*** ERROR: - " + error);
    self.SignalingService.notify(result.state, error, self.web_socket);
    return;
  }
  else if(result.state === "FAILED") {
  	var error1 = result.data;
    Utils.log("*** FAILED: - " + error1);
		self.event.emit("LOGGING", "*** ERROR: - " + error1);
    self.SignalingService.notify(result.state, error1, self.web_socket);
    return;
  }
  else if(result.state === "SUCCESS") {
  	peer_dst = result.data;
  }

  var log = "*** MESSAGE: - Time: " + new Date() + " - " + peer_id + " SEND SDP ANSWER TO" + peer_dst.peer_id + "\n";
  Utils.log(log);
	self.event.emit("LOGGING", log);
  fs.appendFile(global.root_path + "/logs/log.txt", log, function(error) {
  	if(error) {
  		Utils.log(error);
			self.event.emit("LOGGING", "*** ERROR: - " + error);
  	}

  });

  var data_res = {
    "sdp": data_req.message.sdp,
    "peer_id": peer_id
  };
  self.web_socket_server.to(peer_dst.connection_id).emit("MESSAGE", JSON.stringify({'data': {"type": "RECEIVE_ANSWER", "message": data_res}}));
};

ClientSocket.prototype._send_candidate = function(message, peer_id) {
	var self = this;

  var data_req = JSON.parse(message).data;

  var result = self.SignalingService._find_peer_in_room(self.agent, self.room_name, data_req.message.peer_id);
	var peer_dst;

	if(result.state === "ERROR") {
    var error = result.data;
    Utils.log("*** ERROR: - " + error);
		self.event.emit("LOGGING", "*** ERROR: - " + error);
    self.SignalingService.notify(result.state, error, self.web_socket);
    return;
  }
  else if(result.state === "FAILED") {
  	var error1 = result.data;
    Utils.log("*** FAILED: - " + error1);
		self.event.emit("LOGGING", "*** ERROR: - " + error1);
    self.SignalingService.notify(result.state, error1, self.web_socket);
    return;
  }
  else if(result.state === "SUCCESS") {
  	peer_dst = result.data;
  }

  var log = "*** MESSAGE: - Time: " + new Date() + " - " + peer_id + " SEND SDP CANDIDATE TO " + peer_dst.peer_id + "\n";
  Utils.log(log);
	self.event.emit("LOGGING", log);
  fs.appendFile(global.root_path + "/logs/log.txt", log, function(error) {
    if(error) {
    	Utils.log(error);
			self.event.emit("LOGGING", "*** ERROR: - " + error);
    }
  });

  var data_res = {
    "sdp": data_req.message.sdp,
    "peer_id": peer_id
  };
  self.web_socket_server.to(peer_dst.connection_id).emit("MESSAGE", JSON.stringify({'data': {"type": "RECEIVE_CANDIDATE", "message": data_res}}));
};

module.exports = ClientSocket;
